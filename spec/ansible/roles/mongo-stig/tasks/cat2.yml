---
- name: "MEDIUM | SV-252134 | MongoDB must provide audit record generation for DoD-defined auditable events within all DBMS/database components."
  block:
    - name: "MEDIUM | SV-252134 | MongoDB must provide audit record generation for DoD-defined auditable events within all DBMS/database components. | Syslog Option"
      yedit:
        src: "{{ mongod_config_path }}"
        edits:
        - key: auditLog.destination
          value: "{{ audit_log_destination}}"
        - key: setParameter.auditAuthorizationSuccess
          value: true
      when: audit_log_destination == "syslog"

    - name: "MEDIUM | SV-252134 | MongoDB must provide audit record generation for DoD-defined auditable events within all DBMS/database components. | Check for file directory"
      ansible.builtin.file:
        path: "{{ mongo_audit_directory_path }}"
        state: directory
        mode: "{{ mongo_permissions }}"
      when: audit_log_destination == "file"

    - name: "MEDIUM | SV-252134 | MongoDB must provide audit record generation for DoD-defined auditable events within all DBMS/database components. | Check if file exists"
      ansible.builtin.file:
        path: "{{ mongo_audit_file_path }}"
        state: touch
      when: audit_log_destination == "file"

    - name: "MEDIUM | SV-252134 | MongoDB must provide audit record generation for DoD-defined auditable events within all DBMS/database components. | File option"
      yedit:
        src: "{{ mongod_config_path }}"
        edits:
        - key: auditLog.destination
          value: file
        - key: auditLog.format
          value: BSON
        - key: auditLog.path
          value: "{{ mongo_audit_file_path }}"
        - key: auditLog.filter
          value: "{{ mongo_filter }}"
        - key: setParameter.auditAuthorizationSuccess
          value: true
      when: audit_log_destination == "file"
  when: enterprise_edition
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252134
    - enterprise

- name: "MEDIUM | SV-252135 | The audit information produced by MongoDB must be protected from unauthorized access."
  ansible.builtin.file: 
      path: "{{ mongo_audit_directory_path }}"
      owner: "{{ mongo_owner }}"
      group: "{{ mongo_group}}"
      mode: "{{ mongo_permissions }}"
      state: directory
      recurse: yes
  when: enterprise_edition and audit_log_destination == "file"
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252135
    - enterprise

- name: "MEDIUM | SV-252136 | MongoDB must protect its audit features from unauthorized access."
  ansible.builtin.file: 
    path: "{{ mongod_config_path }}"
    owner: "{{ mongo_owner }}"
    group: "{{ mongo_group}}"
    mode: "{{ mongo_permissions }}"
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252136

- name: "MEDIUM | SV-252137 | Unused database components that are integrated in MongoDB and cannot be uninstalled must be disabled."
  yedit:
    src: "{{ mongod_config_path }}"
    key: net.http
    state: absent
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252137

- name: "MEDIUM | SV-252138 | Unused database components that are integrated in MongoDB and cannot be uninstalled must be disabled."
  yedit:
    src: "{{ mongod_config_path }}"
    key: net.http
    state: absent
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252138

- name: "MEDIUM | SV-252140 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users)."
  vars:
    reg_mongo_users_140: []
    user_ids_140: []
    user_names_140: []
    db_names_140: []
    databases_140: []
    users_140: []
    roles_140: []
    id_map_140: []
  block:
    - name: "MEDIUM | SV-252140 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Extract _id fields from MongoDB user data" 
      set_fact:
        user_ids_140: "{{ user_ids_140 + [item._id] }}"
      loop: "{{ user_list.stdout }}"

    - name: "MEDIUM | SV-252140 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Filter out users not in mongo_users" 
      set_fact:
        reg_mongo_users_140: "{{ reg_mongo_users_140 + [item] }}"
      loop: "{{ user_ids_140 }}"
      when: item in mongo_users

    - name: "MEDIUM | SV-252140 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Split each db.user in non_mongo_users"
      set_fact:
        user_names_140: "{{ user_names_140 + [item.split('.')[1]] }}"
        db_names_140: "{{ db_names_140 + [item.split('.')[0]] }}"
      loop: "{{ reg_mongo_users_140 }}"
      
    - name: "MEDIUM | SV-252140 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Get users" 
      ansible.builtin.command: |
        mongosh "mongodb://localhost:27017/{{ db_names_140[index] }}" --quiet --eval "EJSON.stringify(db.getUser('{{ user_names_140[index] }}'))"
      loop: "{{ range(0, user_names_140|length) }}"
      loop_control:
        loop_var: index
      register: command_output

    - name: "MEDIUM | SV-252140 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Extract stdout from command execution" 
      set_fact:
        users_data: "{{ command_output.results | map(attribute='stdout') | list }}"

    - name: "MEDIUM | SV-252140 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Convert users_data into a dictionary" 
      set_fact:
        users_dict: "{{ users_data | map('from_json') | list }}"

    - name: "MEDIUM | SV-252140 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Extract _id and roles" 
      set_fact:
        id_map_140: "{{ id_map_140 | combine({ item['_id']: item['roles'] }) }}"
      loop: "{{ users_dict }}"
      loop_control:
        label: "{{ item }}"

    - name: "MEDIUM | SV-252140 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Extract users with inappropriate roles"
      set_fact:
        users_140: "{{ users_140 + [item.key.split('.')[1]] }}"
        databases_140: "{{ databases_140 + [item.key.split('.')[0]] }}"
        roles_140: "{{ roles_140 + filtered_roles }}"
      loop: "{{ id_map_140 | dict2items }}"
      vars:
        role_items: "{{ item.value }}"
        filtered_roles: "{{ role_items | selectattr('role', 'in', mongo_admin_roles) | map(attribute='role') | list }}"
      when: filtered_roles | length > 0

    - name: "MEDIUM | SV-252140 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Revoke roles"
      ansible.builtin.command: |
        mongosh "mongodb://localhost:27017/{{ databases_140[index] }}" --quiet --eval "EJSON.stringify(db.revokeRolesFromUser('{{ users_140[index]}}', ['{{ roles_140[index] }}']))"
      loop: "{{ range(0, users_140|length) }}"
      loop_control:
        loop_var: index
      
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252140

- name: "MEDIUM | SV-252141 | MongoDB must fail to a secure state if system initialization fails, shutdown fails, or aborts fail."
  yedit:
    src: "{{ mongod_config_path }}"
    key: storage.journal.enabled
    value: true
  when: mongodb_version.stdout is version('6.1.0', '<=', 'version_type=semver')
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252141

- name: "MEDIUM | SV-252142 | MongoDB must prevent unauthorized and unintended information transfer via shared system resources."
  block:
    - name: "MEDIUM | SV-252142 | MongoDB must prevent unauthorized and unintended information transfer via shared system resources. | Conf file"
      ansible.builtin.file: 
        path: "{{ mongod_config_path }}"
        owner: "{{ mongo_owner }}"
        group: "{{ mongo_group}}"
        mode: "{{ mongo_permissions }}"

    - name: "MEDIUM | SV-252142 | MongoDB must prevent unauthorized and unintended information transfer via shared system resources. | Data directory"
      ansible.builtin.file: 
        path: "{{ data_file_directory_path }}"
        owner: "{{ mongo_owner }}"
        group: "{{ mongo_group}}"
        mode: "{{ mongo_permissions }}"
        state: directory
        recurse: yes
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252142

- name: "MEDIUM | SV-252143 | MongoDB and associated applications must reserve the use of dynamic code execution for situations that require it."
  yedit:
      src: "{{ mongod_config_path }}"
      key: security.javascriptEnabled
      value: false
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252143

- name: "MEDIUM | SV-252144 | MongoDB must associate organization-defined types of security labels having organization-defined security label values with information in storage and transmission."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252144."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252144
    - manual

- name: "MEDIUM | SV-252145 | MongoDB must enforce discretionary access control policies, as defined by the data owner, over defined subjects and objects."
  yedit:
      src: "{{ mongod_config_path }}"
      key: security.authorization
      value: enabled      
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252145

- name: "MEDIUM | SV-252147 | MongoDB must implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest (to include, at a minimum, PII and classified information) on organization-defined information system components."
  block: 
  - name: "MEDIUM | SV-252147 | MongoDB must implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest (to include, at a minimum, PII and classified information) on organization-defined information system components. | KMIP Enabled"
    yedit:
      src: "{{ mongod_config_path }}"
      edits:
      - key: net.tls.FIPSMode
        value: true
      - key: security.enableEncryption
        value: true
      - key: kmip.serverName
        value: "{{ KMIP_server_host_name }}"
      - key: kmip.port
        value: "{{ KMIP_server_port }}"
      - key: kimp.ServerCAFile
        value: "{{ KMIP_server_ca_file }}"
      - key: kmip.clientCertificationFile
        value: "{{ KMIP_client_certificate_file }}"
      when: kmip_enabled

  - name: "MEDIUM | SV-252147 | MongoDB must implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest (to include, at a minimum, PII and classified information) on organization-defined information system components. | Local Encryption Key File"
    yedit:
      src: "{{ mongod_config_path }}"
      edits:
      - key: net.tls.FIPSMode
        value: true
      - key: security.enableEncryption
        value: true
      - key: security.encryptionKeyFile
        value: "{{ security_encryption_key_file }}"
      when: not kmip_enabled
  ignore_errors: true
  when: enterprise_edition and encryption_at_rest
  tags:
    - cat2
    - medium
    - SV-252147
    - enterprise
    - pii

- name: "MEDIUM | SV-252148 | MongoDB must limit the total number of concurrent connections to the database."
  yedit:
    src: "{{ mongod_config_path }}"
    key: net.maxIncomingConnections
    value: "{{ max_incoming_connections }}"
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252148

- name: "MEDIUM | SV-252151 | MongoDB must limit privileges to change software modules, to include stored procedures, functions and triggers, and links to software external to MongoDB."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252151."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252151
    - manual

- name: "MEDIUM | SV-252153 | Database software, including DBMS configuration files, must be stored in dedicated directories, or DASD pools, separate from the host OS and other applications."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252153."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252153
    - manual

- name: "MEDIUM | SV-252154 | Database objects (including but not limited to tables, indexes, storage, stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be owned by database/DBMS principals authorized for ownership."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252154."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252154
    - manual

- name: "MEDIUM | SV-252155 | The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be restricted to authorized users."
  vars:
    reg_mongo_users_155: []
    user_ids_155: []
    user_names_155: []
    db_names_155: []
    databases_155: []
    users_155: []
    roles_155: []
    id_map_155: []
  block:
    - name: "MEDIUM | SV-252155 | The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be restricted to authorized users. | Extract _id fields from MongoDB user data" 
      set_fact:
        user_ids_155: "{{ user_ids_155 + [item._id] }}"
      loop: "{{ user_list.stdout }}"

    - name: "MEDIUM | SV-252155 | The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be restricted to authorized users. | Filter out users not in mongo_users" 
      set_fact:
        reg_mongo_users_155: "{{ reg_mongo_users_155 + [item] }}"
      loop: "{{ user_ids_155 }}"
      when: item in mongo_users

    - name: "MEDIUM | SV-252155 | The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be restricted to authorized users. | Split each db.user in non_mongo_users"
      set_fact:
        user_names_155: "{{ user_names_155 + [item.split('.')[1]] }}"
        db_names_155: "{{ db_names_155 + [item.split('.')[0]] }}"
      loop: "{{ reg_mongo_users_155 }}"
      
    - name: "MEDIUM | SV-252155 | The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be restricted to authorized users. | Get users" 
      ansible.builtin.command: |
        mongosh "mongodb://localhost:27017/{{ db_names_155[index] }}" --quiet --eval "EJSON.stringify(db.getUser('{{ user_names_155[index] }}'))"
      loop: "{{ range(0, user_names_155|length) }}"
      loop_control:
        loop_var: index
      register: command_output

    - name: "MEDIUM | SV-252155 | The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be restricted to authorized users. | Extract stdout from command execution" 
      set_fact:
        users_data: "{{ command_output.results | map(attribute='stdout') | list }}"

    - name: "MEDIUM | SV-252155 | The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be restricted to authorized users. | Convert users_data into a dictionary" 
      set_fact:
        users_dict: "{{ users_data | map('from_json') | list }}"

    - name: "MEDIUM | SV-252155 | The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be restricted to authorized users. | Extract _id and roles" 
      set_fact:
        id_map_155: "{{ id_map_155 | combine({ item['_id']: item['roles'] }) }}"
      loop: "{{ users_dict }}"
      loop_control:
        label: "{{ item }}"

    - name: "MEDIUM | SV-252155 | The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be restricted to authorized users. | Extract users with inappropriate roles"
      set_fact:
        users_155: "{{ users_155 + [item.key.split('.')[1]] }}"
        databases_155: "{{ databases_155 + [item.key.split('.')[0]] }}"
        roles_155: "{{ roles_155 + filtered_roles }}"
      loop: "{{ id_map_155 | dict2items }}"
      vars:
        role_items: "{{ item.value }}"
        filtered_roles: "{{ role_items | selectattr('role', 'in', mongo_admin_roles) | map(attribute='role') | list }}"
      when: filtered_roles | length > 0

    - name: "MEDIUM | SV-252155 | The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to MongoDB, etc.) must be restricted to authorized users. | Revoke roles"
      ansible.builtin.command: |
        mongosh "mongodb://localhost:27017/{{ databases_155[index] }}" --quiet --eval "EJSON.stringify(db.revokeRolesFromUser('{{ users_155[index]}}', ['{{ roles_155[index] }}']))"
      loop: "{{ range(0, users_155|length) }}"
      loop_control:
        loop_var: index
      
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252155


- name: "MEDIUM | SV-252156 | Unused database components that are integrated in MongoDB and cannot be uninstalled must be disabled."
  yedit:
    src: "{{ mongod_config_path }}"
    key: net.http
    state: absent
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252156

- name: "MEDIUM | SV-252157 | MongoDB must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users)."
  vars:
    non_mongo_users: []
    user_ids_157: []
    db_names_157: []
    user_names_157: []
  block:
    - name: "MEDIUM | SV-252157 | Enable authorization in MongoDB configuration"
      yedit:
        src: "{{ mongod_config_path }}"
        key: security.authorization
        value: enabled

    - name: "MEDIUM | SV-252157 | Enable authorization in MongoDB configuration | Extract _id fields from MongoDB user data" 
      set_fact:
        user_ids_157: "{{ user_ids_157 + [item._id] }}"
      loop: "{{ user_list.stdout }}"

    - name: "MEDIUM | SV-252157 | Enable authorization in MongoDB configuration | Combine users and super users"
      set_fact:
        all_mongo_users: "{{ mongo_super_users + mongo_users}}"

    - name: "MEDIUM | SV-252157 | Enable authorization in MongoDB configuration | Filter out users not in mongo_users" 
      set_fact:
        non_mongo_users: "{{ non_mongo_users + [item] }}"
      loop: "{{ user_ids_157 }}"
      when: item not in all_mongo_users

    - name: "MEDIUM | SV-252157 | Enable authorization in MongoDB configuration | Split each db.user in non_mongo_users"
      set_fact:
        db_names_157: "{{ db_names_157 + [item.split('.')[0]] }}"
        user_names_157: "{{ user_names_157 + [item.split('.')[1]] }}"
      loop: "{{ non_mongo_users }}"

    - name: "MEDIUM | SV-252157 | Enable authorization in MongoDB configuration | Drop non_mongo_users" 
      ansible.builtin.command: |
        mongosh "mongodb://localhost:27017/{{ db_names_157[index] }}" --quiet --eval "db.dropUser('{{ user_names_157[index] }}', {w: 'majority', wtimeout: 5000})"
      loop: "{{ range(0, user_names_157|length) }}"
      loop_control:
        loop_var: index

  ignore_errors: false
  tags:
    - cat2
    - medium
    - SV-252157

- name: "MEDIUM | SV-252161 | MongoDB must map the PKI-authenticated identity to an associated user account."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252161."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252161
    - manual

- name: "MEDIUM | SV-252163 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users)."
  vars:
    reg_mongo_users_163: []
    user_ids_163: []
    user_names_163: []
    db_names_163: []
    databases_163: []
    users_163: []
    roles_163: []
    id_map_163: []
  block:
    - name: "MEDIUM | SV-252163 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Extract _id fields from MongoDB user data" 
      set_fact:
        user_ids_163: "{{ user_ids_163 + [item._id] }}"
      loop: "{{ user_list.stdout }}"

    - name: "MEDIUM | SV-252163 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Filter out users not in mongo_users" 
      set_fact:
        reg_mongo_users_163: "{{ reg_mongo_users_163 + [item] }}"
      loop: "{{ user_ids_163 }}"
      when: item in mongo_users

    - name: "MEDIUM | SV-252163 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Split each db.user in non_mongo_users"
      set_fact:
        user_names_163: "{{ user_names_163 + [item.split('.')[1]] }}"
        db_names_163: "{{ db_names_163 + [item.split('.')[0]] }}"
      loop: "{{ reg_mongo_users_163 }}"

    - name: "MEDIUM | SV-252163 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Get users" 
      ansible.builtin.command: |
        mongosh "mongodb://localhost:27017/{{ db_names_163[index] }}" --quiet --eval "EJSON.stringify(db.getUser('{{ user_names_163[index] }}'))"
      loop: "{{ range(0, user_names_163|length) }}"
      loop_control:
        loop_var: index
      register: command_output

    - name: "MEDIUM | SV-252163 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Extract stdout from command execution" 
      set_fact:
        users_data: "{{ command_output.results | map(attribute='stdout') | list }}"

    - name: "MEDIUM | SV-252163 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Convert users_data into a dictionary" 
      set_fact:
        users_dict: "{{ users_data | map('from_json') | list }}"

    - name: "MEDIUM | SV-252163 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Extract _id and roles" 
      set_fact:
        id_map_163: "{{ id_map_163 | combine({ item['_id']: item['roles'] }) }}"
      loop: "{{ users_dict }}"
      loop_control:
        label: "{{ item }}"

    - name: "MEDIUM | SV-252163 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Extract users with inappropriate roles"
      set_fact:
        users_163: "{{ users_163 + [item.key.split('.')[1]] }}"
        databases_163: "{{ databases_163 + [item.key.split('.')[0]] }}"
        roles_163: "{{ roles_163 + filtered_roles }}"
      loop: "{{ id_map_163 | dict2items }}"
      vars:
        role_items: "{{ item.value }}"
        filtered_roles: "{{ role_items | selectattr('role', 'in', mongo_admin_roles) | map(attribute='role') | list }}"
      when: filtered_roles | length > 0

    - name: "MEDIUM | SV-252163 | MongoDB must uniquely identify and authenticate non-organizational users (or processes acting on behalf of non-organizational users). | Revoke roles"
      ansible.builtin.command: |
        mongosh "mongodb://localhost:27017/{{ databases_163[index] }}" --quiet --eval "EJSON.stringify(db.revokeRolesFromUser('{{ users_163[index]}}', ['{{ roles_163[index] }}']))"
      loop: "{{ range(0, users_163|length) }}"
      loop_control:
        loop_var: index
      
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252163

- name: "MEDIUM | SV-252164 | MongoDB must maintain the authenticity of communications sessions by guarding against man-in-the-middle attacks that guess at Session ID values."
  yedit:
    src: "{{ mongod_config_path }}"
    key: net.tls.mode
    value: requireTLS
  ignore_errors: true
  when: enterprise_edition and fips_mode
  tags:
    - cat2
    - medium
    - SV-252164
    - enterprise

- name: "MEDIUM | SV-252166 | Database contents must be protected from unauthorized and unintended information transfer by enforcement of a data-transfer policy."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252166."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252166
    - manual

- name: "MEDIUM | SV-252167 | MongoDB must check the validity of all data inputs except those specifically identified by the organization."
  yedit:
      src: "{{ mongod_config_path }}"
      key: security.javascriptEnabled
      value: false
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252167

- name: "MEDIUM | SV-252168 | MongoDB must provide non-privileged users with error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries."
  yedit:
      src: "{{ mongod_config_path }}"
      key: security.redactClientLogData
      value: true
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252168

- name: "MEDIUM | SV-252169 | MongoDB must reveal detailed error messages only to the ISSO, ISSM, SA, and DBA."
  yedit:
      src: "{{ mongod_config_path }}"
      key: security.redactClientLogData
      value: true
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252169

- name: "MEDIUM | SV-252170 | MongoDB must automatically terminate a user session after organization-defined conditions or trigger events requiring session disconnect."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252170."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252170
    - manual

- name: "MEDIUM | SV-252171 | MongoDB must utilize centralized management of the content captured in audit records generated by all components of MongoDB."
  block:
  - name: "MEDIUM | SV-252171 | MongoDB must utilize centralized management of the content captured in audit records generated by all components of MongoDB. | Check for file directory"
    ansible.builtin.file:
      path: "{{ mongo_audit_directory_path }}"
      state: directory
      mode: "{{ mongo_permissions }}"
    when: audit_log_destination == "file"

  - name: "MEDIUM | SV-252171 | MongoDB must utilize centralized management of the content captured in audit records generated by all components of MongoDB. | Check if file exists"
    ansible.builtin.file:
      path: "{{ mongo_audit_file_path }}"
      state: touch
    when: audit_log_destination == "file"

  - name: "MEDIUM | SV-252171 | MongoDB must utilize centralized management of the content captured in audit records generated by all components of MongoDB. | File option"
    yedit:
      src: "{{ mongod_config_path }}"
      edits:
      - key: auditLog.destination
        value: file
      - key: auditLog.format
        value: BSON
      - key: auditLog.path
        value: "{{ mongo_audit_file_path }}"
      - key: auditLog.filter
        value: "{{ mongo_filter }}"
      - key: setParameter.auditAuthorizationSuccess
        value: true
  when: enterprise_edition and audit_log_destination == "file"
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252171
    - enterprise

- name: "MEDIUM | SV-252172 | MongoDB must allocate audit record storage capacity in accordance with site audit record storage requirements."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252170."
  ignore_errors: true
  when: enterprise_edition
  tags:
    - cat2
    - medium
    - SV-252172
    - enterprise
    - manual

- name: "MEDIUM | SV-252173 | MongoDB must provide a warning to appropriate support staff when allocated audit record storage volume reaches 75 percent of maximum audit record storage capacity."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252173."
  ignore_errors: true
  when: enterprise_edition
  tags:
    - cat2
    - medium
    - SV-252173
    - enterprise
    - manual

- name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status."
  vars:
    db_list_174: []
    db_names_174: []
    users_174: []
    roles_174: []
    db_role_resource: {}
    role_details_174: []
    resource_list_174: []
    updated_resource_list_174: []
    dbs_filtered_174: []
    roles_filtered_174: []
  block:
    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Get list of databases"
      ansible.builtin.command: |
        mongosh "mongodb://localhost:27017/admin" --quiet --eval "EJSON.stringify(db.adminCommand({listDatabases: 1}))"
      register: db_list_174
    
    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Extract stdout from each command execution" 
      set_fact:
        users_174: "{{ db_list_174.stdout | from_json }}"

    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Extract database names into a list" 
      set_fact:
        db_names_174: "{{ users_174.databases | map(attribute='name') | list }}"

    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Get list of roles"
      ansible.builtin.command: |
        mongosh "mongodb://localhost:27017/{{ db_names_174[index] }}" --quiet --eval "EJSON.stringify(db.getRoles({rolesInfo: 1,showPrivileges: true}))"
      loop: "{{ range(0, db_names_174|length) }}"
      loop_control:
        loop_var: index
      register: command_output

    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Extract stdout from command execution"
      set_fact:
        roles_174: "{{ command_output.results | map(attribute='stdout') | map('from_json') | list }}"

    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Iterating through the roles, append the details to a list"
      set_fact:
        role_details_174: "{{ role_details_174 + [item.1] }}"
      loop: "{{ roles_174 | subelements('roles') }}"

    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Append the privileges of each role to a list"
      set_fact:
        resource_list_174: "{{ resource_list_174 + item.privileges }}"
      loop: "{{ role_details_174 }}"
      when: "'privileges' in item"

    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Append the inherited privileges of each role to a list"
      set_fact:
        resource_list_174: "{{ resource_list_174 + item.inheritedPrivileges }}"
      loop: "{{ role_details_174 }}"
      when: "'inheritedPrivileges' in item"

    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Process role details and store results based on privileges"
      set_fact:
        filtered_role_details_privileges: >-
          {%- set results = [] -%}
          {%- for role_iter in role_details_174 -%}
          {%- if 'privileges' in role_iter -%}
          {%- for privilege in role_iter['privileges'] -%}
          {%- set filtered_actions = privilege.actions | intersect(inappropriate_mongo_privileges) -%}
          {%- if filtered_actions | length > 0 -%}
          {%- set _ = results.append({
            "db": role_iter.db,
            "role": role_iter.role,
          }) -%}
          {%- endif -%}
          {%- endfor -%}
          {%- endif -%}
          {%- endfor -%}
          {{ results }}

    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Add to dbs_filtered_174 and roles_filtered_174 from filtered results based off of privileges"
      set_fact:
        dbs_filtered_174: "{{ dbs_filtered_174 + [item.db] }}"
        roles_filtered_174: "{{ roles_filtered_174 + [item.role] }}"
      loop: "{{ filtered_role_details_privileges }}"

    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Process role details and store results based on inherited privileges"
      set_fact:
        filtered_role_details_inherited: >-
          {%- set results = [] -%}
          {%- for role_iter in role_details_174 -%}
          {%- if 'inheritedPrivileges' in role_iter -%}
          {%- for privilege in role_iter['inheritedPrivileges'] -%}
          {%- set filtered_actions = privilege.actions | intersect(inappropriate_mongo_privileges) -%}
          {%- if filtered_actions | length > 0 -%}
          {%- set _ = results.append({
            "db": role_iter.db,
            "role": role_iter.role,
          }) -%}
          {%- endif -%}
          {%- endfor -%}
          {%- endif -%}
          {%- endfor -%}
          {{ results }}

    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Add to dbs_filtered_174 and roles_filtered_174 from filtered results based off of inherited privileges"
      set_fact:
        dbs_filtered_174: "{{ dbs_filtered_174 + [item.db] }}"
        roles_filtered_174: "{{ roles_filtered_174 + [item.role] }}"
      loop: "{{ filtered_role_details_inherited }}"

    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Replace each action key in the dictionary with the actions from inappropriate_mongo_privileges"
      set_fact:
        updated_resource_list_174: "{{ updated_resource_list_174 + [item | combine({'actions': inappropriate_mongo_privileges}, recursive=true)] }}"
      loop: "{{ resource_list_174 }}"

    - name: "MEDIUM | SV-252174 | MongoDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status. | Revoke inappropriate privileges from each role"
      ansible.builtin.command: |
        mongosh "mongodb://localhost:27017/{{ dbs_filtered_174[index] }}" --quiet --eval "db.revokePrivilegesFromRole('{{ roles_filtered_174[index] }}', [{{ updated_resource_list_174[index] }}])"
      loop: "{{ range(0, dbs_filtered_174|length) }}"
      loop_control:
        loop_var: index

  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252174


- name: "MEDIUM | SV-252175 | MongoDB must enforce access restrictions associated with changes to the configuration of MongoDB or database(s)."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252175."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252175
    - manual

- name: "MEDIUM | SV-252176 | MongoDB must require users to reauthenticate when organization-defined circumstances or situations require reauthentication."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252176."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252176
    - manual

- name: "MEDIUM | SV-252177 | MongoDB must prohibit the use of cached authenticators after an organization-defined time period."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252177."
  ignore_errors: true
  when: enterprise_edition
  tags:
    - cat2
    - medium
    - SV-252177
    - enterprise
    - manual
    

- name: "MEDIUM | SV-252178 | MongoDB must only accept end entity certificates issued by DoD PKI or DoD-approved PKI Certification Authorities (CAs) for the establishment of all encrypted sessions."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252178."
  ignore_errors: true
  when: enterprise_edition
  tags:
    - cat2
    - medium
    - SV-252178
    - enterprise
    - manual

- name: "MEDIUM | SV-252179 | MongoDB must maintain the confidentiality and integrity of information during preparation for transmission."
  yedit:
    src: "{{ mongod_config_path }}"
    edits:
    - key: net.tls.mode
      value: requireTLS
    - key: net.tls.certificateKeyFile
      value: "{{ certificate_key_file_dest }}"
    - key: net.tls.CAFile
      value: "{{ ca_file_dest }}"
    - key: net.tls.allowInvalidCertificates
      value: false
    - key: net.tls.allowConnectionsWithoutCertificates
      value: false
    - key: net.tls.FIPSMode
      value: true
  when: enterprise_edition and fips_mode
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252179
    - enterprise
    - fips

- name: "MEDIUM | SV-252180 | MongoDB must maintain the confidentiality and integrity of information during reception."
  yedit:
    src: "{{ mongod_config_path }}"
    edits:
    - key: net.tls.mode
      value: requireTLS
    - key: net.tls.certificateKeyFile
      value: "{{ certificate_key_file_dest }}"
    - key: net.tls.CAFile
      value: "{{ ca_file_dest }}"
    - key: net.tls.allowInvalidCertificates
      value: false
    - key: net.tls.allowConnectionsWithoutCertificates
      value: false
    - key: net.tls.FIPSMode
      value: true
  when: enterprise_edition and fips_mode
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252180
    - enterprise
    - fips

- name: "MEDIUM | SV-252181 | When invalid inputs are received, MongoDB must behave in a predictable and documented manner that reflects organizational and system objectives."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252181."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252181
    - manual

- name: "MEDIUM | SV-252182 | When updates are applied to MongoDB software, any software components that have been replaced or made unnecessary must be removed."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252182."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252182
    - manual

- name: "MEDIUM | SV-252183 | Security-relevant software updates to MongoDB must be installed within the time period directed by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs)."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252183."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252183
    - manual

- name: "MEDIUM | SV-252185 | MongoDB must be configured in accordance with the security configuration settings based on DoD security configuration and implementation guidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs."
  ansible.builtin.debug:
    msg: "Consult the STIG documentation to manually address and verify compliance for SV-252185."
  ignore_errors: true
  tags:
    - cat2
    - medium
    - SV-252185
    - manual
